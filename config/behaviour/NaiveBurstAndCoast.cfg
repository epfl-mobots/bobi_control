#!/usr/bin/env python
from dynamic_reconfigure.parameter_generator_catkin import *
from enum import Enum
PACKAGE = "bobi_control"

RobotDefaults = Enum('RobotDefaults', 'Fishbot FishbotV4 Thymio Demo')
robot = RobotDefaults.Fishbot


class Defaults:
    def __init__(self, type: RobotDefaults):
        self._type = type

    def __call__(self) -> ParameterGenerator:
        gen = ParameterGenerator()
        if self._type == RobotDefaults.Thymio:
            Kp_v = 0.05
            Kp_w = 0.25
            Ki_v = 0.002
            Ki_w = 0.002
            Kd_v = 0.005
            Kd_w = 0.005
            ub_v = 0.2
            ub_w = 9.0
            lb_v = 0.0
            lb_w = -9.0
            scaler_v = 1.0
            scaler_w = 1.0
            distance_threshold = 0.01
            rotate_in_place_threshold_ub = 1.0
            rotate_in_place_threshold_lb = 0.1      
        elif self._type == RobotDefaults.FishbotV4:
            Kp_v = 0.08
            Kp_w = 0.08
            Ki_v = 0.01
            Ki_w = 0.005
            Kd_v = 0.01
            Kd_w = 0.02
            ub_v = 0.30
            ub_w = 9.0
            lb_v = 0.0
            lb_w = -9.0
            scaler_v = 1.0
            scaler_w = 1.0
            distance_threshold = 0.005
            rotate_in_place_threshold_ub = 0.7
            rotate_in_place_threshold_lb = 0.1           
        elif self._type == RobotDefaults.Fishbot:  # assume fishbotV5
            Kp_v = 0.09
            Kp_w = 0.09
            Ki_v = 0.0
            Ki_w = 0.005
            Kd_v = 0.03
            Kd_w = 0.02
            ub_v = 0.4
            ub_w = 15.0
            lb_v = 0.0
            lb_w = -15.0
            scaler_v = 1.0
            scaler_w = 1.0
            distance_threshold = 0.005
            rotate_in_place_threshold_ub = 2.0
            rotate_in_place_threshold_lb = 0.2      
        elif self._type == RobotDefaults.Demo: 
                Kp_v = 0.02
                Kp_w = 0.07
                Ki_v = 0.002
                Ki_w = 0.005
                Kd_v = 0.005
                Kd_w = 0.01
                ub_v = 0.35
                ub_w = 9.0
                lb_v = 0.0
                lb_w = -9.0
                scaler_v = 1.0
                scaler_w = 1.0
                distance_threshold = 0.005
                rotate_in_place_threshold_ub = 0.9
                rotate_in_place_threshold_lb = 0.3 
        else:
                assert False 



        gen.add("Kp_v",    double_t,    0,
                "Proportional gain for linear velocity", Kp_v,  0.0, 100.0)
        gen.add("Kp_w",    double_t,    0,
                "Proportional gain for angular velocity", Kp_w,  0.0, 100.0)
        gen.add("Ki_v",    double_t,    0,
                "Integral gain for linear velocity", Ki_v,  0.0, 100.0)
        gen.add("Ki_w",    double_t,    0,
                "Integral gain for angular velocity", Ki_w,  0.0, 100.0)
        gen.add("Kd_v",    double_t,    0,
                "Derivative gain for linear velocity", Kd_v,  0.0, 100.0)
        gen.add("Kd_w",    double_t,    0,
                "Derivative gain for angular velocity", Kd_w,  0.0, 100.0)

        gen.add("ub_v",    double_t,    0,
                "Linear velocity upper bound (m/s)", ub_v,  0.0, 0.60)
        gen.add("ub_w",    double_t,    0,
                "Angular velocity upper bound (m/s)", ub_w,  0.0, 3000.0)
        gen.add("lb_v",    double_t,    0,
                "Linear velocity lower bound (m/s)", lb_v - 0.60, 0)
        gen.add("lb_w",    double_t,    0,
                "Angular velocity lower bound (m/s)", lb_w,  -3000.0, 0)

        gen.add("scaler_v",    double_t,    0,
                "Scaling coefficient for the linear velocity PID", scaler_v,  0.00001, 100)
        gen.add("scaler_w",    double_t,    0,
                "Scaling coefficient for the right angular velocity PID", scaler_w,  0.00001, 100)

        gen.add("distance_threshold",    double_t,    0,
                "Distance threshold", distance_threshold,  0.00001, 100)
        gen.add("rotate_in_place_threshold_ub",    double_t,    0,
                "Threshold below which the robot should (Upper bound)", rotate_in_place_threshold_ub,  0.0, 3.14)
        gen.add("rotate_in_place_threshold_lb",    double_t,    0,
                "Threshold below which the robot shoul (Lower bound)", rotate_in_place_threshold_lb,  0.0, 3.14)
        gen.add("verbose",   bool_t,   0, "Verbose",  False)

        gen.add("radius",    double_t,    0, "", 0.24,  0.0, 100.0)

        gen.add("iuturn",   bool_t,   0, "",  True)
        gen.add("perceived_agents",    int_t,    0, "", 1,  0, 100)
        gen.add("gamma_rand",    double_t,    0, "", 0.3,  0.0, 1.0)
        gen.add("gamma_wall",    double_t,    0, "", 0.23,  0.0, 1.0)
        gen.add("gamma_sym",    double_t,    0, "", 0.0,  0.0, 1.0)
        gen.add("gamma_asym",    double_t,    0, "", 0.05,  0.0, 1.0)
        gen.add("wall_interaction_range",    double_t,    0, "", 6.0,  0.0, 100.0)
        
        gen.add("dw",    double_t,    0, "", 1.0,  6.0, 20.0)
        gen.add("dc",    double_t,    0, "", 1.0,  0.0, 20.0)
        gen.add("gamma_attraction",    double_t,    0, "", 0.3,  0.0, 1.0)
        gen.add("gamma_alignment",    double_t,    0, "", 0.3,  0.0, 1.0)
        
        gen.add("duturn",    double_t,    0, "", 6.0,  0.0, 20.0)
        gen.add("pjump",    double_t,    0, "", 0.0,  0.0, 1.0)
        gen.add("psi_c",    double_t,    0, "", 0.0,  0.0, 1.0)

        gen.add("vmean",    double_t,    0, "", 43.0,  0.0, 50.0)
        gen.add("vmin",    double_t,    0, "", 1.0,  0.0, 50.0)
        gen.add("vmem",    double_t,    0, "", 0.9,  0.0, 1.0)
        gen.add("vmem12",    double_t,    0, "", 0.5,  0.0, 1.0)
        gen.add("vcut",    double_t,    0, "", 35.0,  0.0, 50.0)
        
        gen.add("taumean",    double_t,    0, "", 0.52,  0.0, 2.0)
        gen.add("taumin",    double_t,    0, "", 0.2,  0.0, 2.0)
        gen.add("tau0",    double_t,    0, "", 0.8,  0.0, 2.0)

        gen.add("itermax",    int_t,    0, "", 10,  0, 100)

        return gen


gen = Defaults(robot)()
exit(gen.generate(PACKAGE, "naive_burst_and_coast_node", "NaiveBurstAndCoast"))
